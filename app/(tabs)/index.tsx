import { View, Text, StyleSheet, TextInput, TouchableOpacity, ScrollView, Alert } from 'react-native';
import { useState } from 'react';
import { useRouter } from 'expo-router';
import { Search, Sparkles, User } from 'lucide-react-native';
import { LinearGradient } from 'expo-linear-gradient';
import Constants from 'expo-constants';
// Import the API key from environment variables and check if it exists
const groqApiKey = Constants?.expoConfig?.extra?.GROQ_API_KEY ?? '';

// Remove finalLangCodeId parameter
async function groqResponse(
  concatenatedTriviaQuizUser: string, // Explicitly type as string
  aiModel: string,
  temperature: number,
  maxCompletionTokens: number,
  topP: number,
  stop: null,
  stream: boolean
) {
  const concatenatedTriviaQuizAssistant = `
    You are a creative writer API capable to generating a JSON data about articles about real news from the BBC website. The articles should be created as if it was written by the (historical) person specified by the user. The user input includes the name of the person and a list of news websites. Your output should be a list, containing objects about the generated articles. Respond ONLY with valid JSON. Use double quotes for all keys and string values.
    [  
      {
          "Timestamp": "2025-05-09 13:22 (local time and date when the source news was published)",
          "Input person name": "name of the person (string)",
          "Generated article": "imaginary article generated by the person (string)",
          "Source URL": "URL of the source news which this article is based on (string)",
      },
    ]
  `;

  const messagesFinal = [
    { role: 'system', content: concatenatedTriviaQuizAssistant },
    { role: 'user', content: concatenatedTriviaQuizUser }
  ];

  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${groqApiKey}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: aiModel,
      messages: messagesFinal,
      temperature,
      max_completion_tokens: maxCompletionTokens,
      top_p: topP,
      stop,
      stream
    })
  });

  if (!response.ok) throw new Error('Groq API error');
  const data = await response.json();
  return [aiModel, data.choices[0].message.content];
}

export default function HomeScreen() {
  const [personName, setPersonName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async () => {
    if (!personName.trim()) {
      Alert.alert('Please enter a famous person\'s name');
      return;
    }

    setIsLoading(true);

    // Prepare Groq API parameters
    const temperature = 0.5;
    const maxCompletionTokens = 1024;
    const topP = 1;
    const stop = null;
    const stream = false;
    const newsUrls = [
      'https://www.bbc.com/news/articles/crk6elpx4gpo',
      'https://www.bbc.com/news/articles/c994v28mezlo',
      'https://www.bbc.com/sport/football/live/cp90zrl01n2t',
    ];
    
    // Explicitly type as string
    const concatenatedTriviaQuizUser: string = `Write an article about the real news found at this list: ${newsUrls} as if it is written by ${personName.trim()}`;
    const finalAiModel = 'llama-3.3-70b-versatile';

    try {
      const groqOutput = await groqResponse(
        concatenatedTriviaQuizUser,
        finalAiModel,
        temperature,
        maxCompletionTokens,
        topP,
        stop,
        stream
      );

      setIsLoading(false);

      // Print the AI response to the console
      console.log('AI Response:', groqOutput[1]);

      router.push({
        pathname: '/news',
        params: {
          person: personName.trim(),
          aiResponse: groqOutput[1],
        }
      });
    } catch (error) {
      setIsLoading(false);
      Alert.alert('Error fetching AI response');
      console.error(error);
    }
  };

  // const handleSubmit = async () => {
  //   if (!personName.trim()) {
  //     Alert.alert('Please enter a famous person\'s name');
  //     return;
  //   }

  //   setIsLoading(true);
    
  //   // Simulate API call to identify person and fetch news
  //   setTimeout(() => {
  //     setIsLoading(false);
  //     // Navigate to news with the person parameter
  //     router.push({
  //       pathname: '/news',
  //       params: { person: personName.trim() }
  //     });
  //   }, 2000);
  // };

  const famousPersons = [
    'Albert Einstein', 'Oprah Winfrey', 'Elon Musk', 'Maya Angelou',
    'Steve Jobs', 'Nelson Mandela', 'Marie Curie', 'Winston Churchill'
  ];

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <LinearGradient
        colors={['#BB1919', '#1E3A8A']}
        style={styles.header}
      >
        <View style={styles.headerContent}>
          <Sparkles size={40} color="#fff" />
          <Text style={styles.headerTitle}>AI News Perspectives</Text>
          <Text style={styles.headerSubtitle}>
            Discover how famous minds would cover today's news
          </Text>
        </View>
      </LinearGradient>

      <View style={styles.content}>
        <View style={styles.formSection}>
          <Text style={styles.sectionTitle}>Choose Your Perspective</Text>
          <Text style={styles.sectionSubtitle}>
            Enter a famous person's name to see today's news through their unique lens
          </Text>

          <View style={styles.inputContainer}>
            <User size={20} color="#666" style={styles.inputIcon} />
            <TextInput
              style={styles.input}
              placeholder="e.g., Albert Einstein, Oprah Winfrey..."
              value={personName}
              onChangeText={setPersonName}
              placeholderTextColor="#999"
              editable={!isLoading}
            />
          </View>

          <TouchableOpacity
            style={[styles.submitButton, isLoading && styles.submitButtonDisabled]}
            onPress={handleSubmit}
            disabled={isLoading}
          >
            <Search size={20} color="#fff" />
            <Text style={styles.submitButtonText}>
              {isLoading ? 'Generating Perspectives...' : 'Generate News Perspectives'}
            </Text>
          </TouchableOpacity>
        </View>

        <View style={styles.suggestionsSection}>
          <Text style={styles.suggestionsTitle}>Popular Perspectives</Text>
          <View style={styles.suggestionsGrid}>
            {famousPersons.map((person, index) => (
              <TouchableOpacity
                key={index}
                style={styles.suggestionChip}
                onPress={() => setPersonName(person)}
                disabled={isLoading}
              >
                <Text style={styles.suggestionText}>{person}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        <View style={styles.infoSection}>
          <Text style={styles.infoTitle}>How It Works</Text>
          <View style={styles.infoStep}>
            <View style={styles.stepNumber}>
              <Text style={styles.stepNumberText}>1</Text>
            </View>
            <Text style={styles.stepText}>
              We identify your chosen famous person and their unique perspective
            </Text>
          </View>
          <View style={styles.infoStep}>
            <View style={styles.stepNumber}>
              <Text style={styles.stepNumberText}>2</Text>
            </View>
            <Text style={styles.stepText}>
              We fetch today's top 10 news stories from trusted sources
            </Text>
          </View>
          <View style={styles.infoStep}>
            <View style={styles.stepNumber}>
              <Text style={styles.stepNumberText}>3</Text>
            </View>
            <Text style={styles.stepText}>
              AI transforms each story into their unique voice and perspective
            </Text>
          </View>
        </View>

        <View style={styles.disclaimer}>
          <Text style={styles.disclaimerText}>
            All AI-generated content is clearly labeled and based on factual news sources. 
            Original articles are always provided for comparison.
          </Text>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    paddingTop: 60,
    paddingBottom: 40,
    paddingHorizontal: 20,
  },
  headerContent: {
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#fff',
    marginTop: 12,
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#fff',
    opacity: 0.9,
    textAlign: 'center',
    marginTop: 8,
    lineHeight: 22,
  },
  content: {
    padding: 20,
  },
  formSection: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 8,
  },
  sectionSubtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 24,
    lineHeight: 22,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 4,
    marginBottom: 20,
    borderWidth: 2,
    borderColor: '#e9ecef',
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    paddingVertical: 16,
    color: '#1a1a1a',
  },
  submitButton: {
    backgroundColor: '#BB1919',
    borderRadius: 12,
    paddingVertical: 16,
    paddingHorizontal: 24,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  submitButtonDisabled: {
    backgroundColor: '#ccc',
  },
  submitButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  suggestionsSection: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  suggestionsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 16,
  },
  suggestionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  suggestionChip: {
    backgroundColor: '#f8f9fa',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 8,
    marginBottom: 8,
  },
  suggestionText: {
    fontSize: 14,
    color: '#1E3A8A',
    fontWeight: '500',
  },
  infoSection: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 16,
  },
  infoStep: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  stepNumber: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: '#BB1919',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  stepNumberText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  stepText: {
    flex: 1,
    fontSize: 16,
    color: '#666',
    lineHeight: 22,
    paddingTop: 2,
  },
  disclaimer: {
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#BB1919',
  },
  disclaimerText: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
    fontStyle: 'italic',
  },
});